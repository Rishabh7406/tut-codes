{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Handling Missing Values in Pandas (Detailed)\n",
                "\n",
                "Missing data can affect analysis. In this notebook, we will cover:\n",
                "- Identifying missing values\n",
                "- Removing missing values\n",
                "- Filling missing values using various strategies\n",
                "- Advanced methods like interpolation and forward fill"
            ]
        },
        {
            "cell_type": "code",
            "metadata": {},
            "execution_count": null,
            "source": [
                "import pandas as pd\n",
                "import numpy as np\n",
                "\n",
                "# Create a sample DataFrame with missing values\n",
                "data = {\n",
                "    'A': [1, 2, np.nan, 4, 5],\n",
                "    'B': [np.nan, 2, 3, np.nan, 5],\n",
                "    'C': [1, np.nan, np.nan, 4, 5]\n",
                "}\n",
                "df = pd.DataFrame(data)\n",
                "print('Original DataFrame:')\n",
                "print(df)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Identifying Missing Values\n",
                "Use `isnull()`, `sum()`, or `info()` to get an overview of missing data."
            ]
        },
        {
            "cell_type": "code",
            "metadata": {},
            "execution_count": null,
            "source": [
                "print('\\nMissing values (isnull):')\n",
                "print(df.isnull())\n",
                "\n",
                "print('\\nCount of missing values per column:')\n",
                "print(df.isnull().sum())\n",
                "\n",
                "print('\\nDataFrame info:')\n",
                "df.info()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Removing Missing Values\n",
                "Use `dropna()` to remove rows or columns with missing values. Be cautious as this might remove useful data."
            ]
        },
        {
            "cell_type": "code",
            "metadata": {},
            "execution_count": null,
            "source": [
                "df_dropna = df.dropna()\n",
                "print('\\nDataFrame after dropna():')\n",
                "print(df_dropna)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Filling Missing Values\n",
                "There are several strategies:\n",
                "- **Constant value:** Use `fillna(0)`\n",
                "- **Column mean:** Use `fillna(df.mean())`\n",
                "- **Forward fill:** Use `fillna(method='ffill')`\n",
                "- **Interpolation:** Use `interpolate()` for continuous data"
            ]
        },
        {
            "cell_type": "code",
            "metadata": {},
            "execution_count": null,
            "source": [
                "# Fill with a constant value\n",
                "df_fill_const = df.fillna(0)\n",
                "print('\\nDataFrame after fillna(0):')\n",
                "print(df_fill_const)\n",
                "\n",
                "# Fill with the column mean\n",
                "df_fill_mean = df.fillna(df.mean())\n",
                "print('\\nDataFrame after filling with mean:')\n",
                "print(df_fill_mean)\n",
                "\n",
                "# Forward fill\n",
                "df_ffill = df.fillna(method='ffill')\n",
                "print('\\nDataFrame after forward fill:')\n",
                "print(df_ffill)\n",
                "\n",
                "# Interpolation\n",
                "df_interp = df.interpolate()\n",
                "print('\\nDataFrame after interpolation:')\n",
                "print(df_interp)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Summary\n",
                "Choose the method based on your data. Dropping data loses information; filling data preserves it but might introduce bias."
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "name": "python",
            "version": "3.x"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}